--les tables
DROP TABLE IF EXISTS BOURSE.BILLET;
DROP TABLE IF EXISTS BOURSE.HISTORIQUE;
DROP TABLE IF EXISTS BOURSE.COMMANDE  ;
DROP TABLE IF EXISTS BOURSE.ANNONCE  ;
DROP TABLE IF EXISTS BOURSE.DATE ;
DROP TABLE IF EXISTS BOURSE.ALERTE  ;
DROP TABLE IF EXISTS BOURSE.MESSAGE ;
DROP TABLE IF EXISTS BOURSE.USER  ;
DROP TABLE IF EXISTS BOURSE.SPECTACLE ;
DROP TABLE IF EXISTS BOURSE.CATEGORIE  ;

DROP SCHEMA IF EXISTS BOURSE CASCADE;

CREATE SCHEMA BOURSE; -- afaire seul

--ici faut passer du schema public vers le schema bourse

CREATE TYPE cate AS ENUM('vip','balcon','normal','arriere');
CREATE TYPE ope AS ENUM('valider','annuler','achat');


CREATE TABLE BOURSE.USER (
  user_id SERIAL PRIMARY KEY,
  nom VARCHAR,
  prenom VARCHAR,
  login VARCHAR NOT NULL UNIQUE,
  password VARCHAR,
  solde float8 CHECK (solde >= 0) DEFAULT 100
);


CREATE TABLE BOURSE.DATE (
  date_id SERIAL PRIMARY KEY,
  valeur TIMESTAMP
);


CREATE TABLE BOURSE.SPECTACLE (
  spectacle_id SERIAL PRIMARY KEY,
  titre VARCHAR,
  salle VARCHAR,
  date_spectacle TIMESTAMP,
  duree INTEGER
);


CREATE TABLE BOURSE.CATEGORIE (
  categorie_id SERIAL PRIMARY KEY,
  nom cate,
  prix_original float8
);

CREATE TABLE BOURSE.ANNONCE (
  annonce_id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES BOURSE.USER(user_id) ON DELETE CASCADE,
  spectacle_id INTEGER REFERENCES BOURSE.SPECTACLE(spectacle_id) ON DELETE CASCADE,
  date_mise_vente TIMESTAMP,
  bloc BOOLEAN NOT NULL,
  pix_revente float8 NOT NULL,
  mise_en_avant BOOLEAN NOT NULL DEFAULT FALSE
);



CREATE TABLE BOURSE.COMMANDE (
  commande_id SERIAL PRIMARY KEY,
  annonce_id INTEGER REFERENCES BOURSE.ANNONCE(annonce_id) ON DELETE CASCADE,
  user_id INTEGER REFERENCES BOURSE.USER(user_id) ON DELETE CASCADE,
  date_commande TIMESTAMP,
  montant float8
);


CREATE TABLE BOURSE.BILLET (
  billet_id SERIAL PRIMARY KEY,
  annonce_id INTEGER REFERENCES BOURSE.ANNONCE(annonce_id) ON DELETE CASCADE,
  commande_id INTEGER REFERENCES BOURSE.COMMANDE(commande_id) ON DELETE CASCADE,
  categorie_id INTEGER REFERENCES BOURSE.CATEGORIE(categorie_id) ON DELETE CASCADE,
  numero_place INTEGER,
  disponible BOOLEAN NOT NULL DEFAULT TRUE
);



CREATE TABLE BOURSE.HISTORIQUE (
  historique_id SERIAL PRIMARY KEY,
  commande_id INTEGER REFERENCES BOURSE.COMMANDE(commande_id) ON DELETE CASCADE,
  operation ope,
  date_operation TIMESTAMP
);



CREATE TABLE BOURSE.ALERTE (
  alerte_id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES BOURSE.USER(user_id),
  spectacle_id INTEGER REFERENCES BOURSE.SPECTACLE(spectacle_id) ON DELETE CASCADE,
  categorie_id INTEGER REFERENCES BOURSE.CATEGORIE(categorie_id) ON DELETE CASCADE
);



CREATE TABLE BOURSE.MESSAGE (
  message_id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES BOURSE.USER(user_id) ON DELETE CASCADE,
  contenue VARCHAR
);




GRANT USAGE ON SCHEMA BOURSE to PUBLIC;
GRANT SELECT ON ALL TABLES IN SCHEMA  BOURSE to PUBLIC;
GRANT INSERT ON ALL TABLES IN SCHEMA  BOURSE to PUBLIC;